import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { VerifyOTPMessageRequest, VerifyOTPMessageResponse } from "../models/models_1";
import { PinpointClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../PinpointClient";
/**
 * @public
 */
export type { __MetadataBearer };
export { $Command };
/**
 * @public
 *
 * The input for {@link VerifyOTPMessageCommand}.
 */
export interface VerifyOTPMessageCommandInput extends VerifyOTPMessageRequest {
}
/**
 * @public
 *
 * The output of {@link VerifyOTPMessageCommand}.
 */
export interface VerifyOTPMessageCommandOutput extends VerifyOTPMessageResponse, __MetadataBearer {
}
declare const VerifyOTPMessageCommand_base: {
    new (input: VerifyOTPMessageCommandInput): import("@smithy/smithy-client").CommandImpl<VerifyOTPMessageCommandInput, VerifyOTPMessageCommandOutput, PinpointClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (__0_0: VerifyOTPMessageCommandInput): import("@smithy/smithy-client").CommandImpl<VerifyOTPMessageCommandInput, VerifyOTPMessageCommandOutput, PinpointClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Verify an OTP</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { PinpointClient, VerifyOTPMessageCommand } from "@aws-sdk/client-pinpoint"; // ES Modules import
 * // const { PinpointClient, VerifyOTPMessageCommand } = require("@aws-sdk/client-pinpoint"); // CommonJS import
 * const client = new PinpointClient(config);
 * const input = { // VerifyOTPMessageRequest
 *   ApplicationId: "STRING_VALUE", // required
 *   VerifyOTPMessageRequestParameters: { // VerifyOTPMessageRequestParameters
 *     DestinationIdentity: "STRING_VALUE", // required
 *     Otp: "STRING_VALUE", // required
 *     ReferenceId: "STRING_VALUE", // required
 *   },
 * };
 * const command = new VerifyOTPMessageCommand(input);
 * const response = await client.send(command);
 * // { // VerifyOTPMessageResponse
 * //   VerificationResponse: { // VerificationResponse
 * //     Valid: true || false,
 * //   },
 * // };
 *
 * ```
 *
 * @param VerifyOTPMessageCommandInput - {@link VerifyOTPMessageCommandInput}
 * @returns {@link VerifyOTPMessageCommandOutput}
 * @see {@link VerifyOTPMessageCommandInput} for command's `input` shape.
 * @see {@link VerifyOTPMessageCommandOutput} for command's `response` shape.
 * @see {@link PinpointClientResolvedConfig | config} for PinpointClient's `config` shape.
 *
 * @throws {@link BadRequestException} (client fault)
 *  <p>Provides information about an API request or response.</p>
 *
 * @throws {@link ForbiddenException} (client fault)
 *  <p>Provides information about an API request or response.</p>
 *
 * @throws {@link InternalServerErrorException} (server fault)
 *  <p>Provides information about an API request or response.</p>
 *
 * @throws {@link MethodNotAllowedException} (client fault)
 *  <p>Provides information about an API request or response.</p>
 *
 * @throws {@link NotFoundException} (client fault)
 *  <p>Provides information about an API request or response.</p>
 *
 * @throws {@link PayloadTooLargeException} (client fault)
 *  <p>Provides information about an API request or response.</p>
 *
 * @throws {@link TooManyRequestsException} (client fault)
 *  <p>Provides information about an API request or response.</p>
 *
 * @throws {@link PinpointServiceException}
 * <p>Base exception class for all service exceptions from Pinpoint service.</p>
 *
 *
 * @public
 */
export declare class VerifyOTPMessageCommand extends VerifyOTPMessageCommand_base {
    /** @internal type navigation helper, not in runtime. */
    protected static __types: {
        api: {
            input: VerifyOTPMessageRequest;
            output: VerifyOTPMessageResponse;
        };
        sdk: {
            input: VerifyOTPMessageCommandInput;
            output: VerifyOTPMessageCommandOutput;
        };
    };
}
