import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeDateTime as __serializeDateTime, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { BadRequestException, ConflictException, ForbiddenException, InternalServerErrorException, MethodNotAllowedException, NotFoundException, PayloadTooLargeException, TooManyRequestsException, } from "../models/models_0";
import { PinpointServiceException as __BaseException } from "../models/PinpointServiceException";
export const se_CreateAppCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps");
    let body;
    if (input.CreateApplicationRequest !== undefined) {
        body = se_CreateApplicationRequest(input.CreateApplicationRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateCampaignCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/campaigns");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.WriteCampaignRequest !== undefined) {
        body = se_WriteCampaignRequest(input.WriteCampaignRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateEmailTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/templates/{TemplateName}/email");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    if (input.EmailTemplateRequest !== undefined) {
        body = se_EmailTemplateRequest(input.EmailTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateExportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/jobs/export");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.ExportJobRequest !== undefined) {
        body = _json(input.ExportJobRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateImportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/jobs/import");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.ImportJobRequest !== undefined) {
        body = _json(input.ImportJobRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateInAppTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/templates/{TemplateName}/inapp");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    if (input.InAppTemplateRequest !== undefined) {
        body = se_InAppTemplateRequest(input.InAppTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateJourneyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/journeys");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.WriteJourneyRequest !== undefined) {
        body = se_WriteJourneyRequest(input.WriteJourneyRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePushTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/templates/{TemplateName}/push");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    if (input.PushNotificationTemplateRequest !== undefined) {
        body = se_PushNotificationTemplateRequest(input.PushNotificationTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRecommenderConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/recommenders");
    let body;
    if (input.CreateRecommenderConfiguration !== undefined) {
        body = _json(input.CreateRecommenderConfiguration);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSegmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/segments");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.WriteSegmentRequest !== undefined) {
        body = se_WriteSegmentRequest(input.WriteSegmentRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSmsTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/templates/{TemplateName}/sms");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    if (input.SMSTemplateRequest !== undefined) {
        body = se_SMSTemplateRequest(input.SMSTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateVoiceTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/templates/{TemplateName}/voice");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    let body;
    if (input.VoiceTemplateRequest !== undefined) {
        body = se_VoiceTemplateRequest(input.VoiceTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAdmChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/adm");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteApnsChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/apns");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteApnsSandboxChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/apns_sandbox");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteApnsVoipChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/apns_voip");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteApnsVoipSandboxChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/apns_voip_sandbox");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAppCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteBaiduChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/baidu");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteCampaignCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/campaigns/{CampaignId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("CampaignId", () => input.CampaignId, "{CampaignId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteEmailChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/email");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteEmailTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/templates/{TemplateName}/email");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_v]: [, input[_V]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteEndpointCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/endpoints/{EndpointId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EndpointId", () => input.EndpointId, "{EndpointId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteEventStreamCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/eventstream");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteGcmChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/gcm");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteInAppTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/templates/{TemplateName}/inapp");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_v]: [, input[_V]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteJourneyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/journeys/{JourneyId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("JourneyId", () => input.JourneyId, "{JourneyId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePushTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/templates/{TemplateName}/push");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_v]: [, input[_V]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteRecommenderConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/recommenders/{RecommenderId}");
    b.p("RecommenderId", () => input.RecommenderId, "{RecommenderId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteSegmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/segments/{SegmentId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("SegmentId", () => input.SegmentId, "{SegmentId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteSmsChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/sms");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteSmsTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/templates/{TemplateName}/sms");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_v]: [, input[_V]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteUserEndpointsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/users/{UserId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVoiceChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/voice");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVoiceTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/templates/{TemplateName}/voice");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_v]: [, input[_V]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetAdmChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/adm");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetApnsChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/apns");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetApnsSandboxChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/apns_sandbox");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetApnsVoipChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/apns_voip");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetApnsVoipSandboxChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/apns_voip_sandbox");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAppCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetApplicationDateRangeKpiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/kpis/daterange/{KpiName}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("KpiName", () => input.KpiName, "{KpiName}", false);
    const query = map({
        [_et]: [() => input.EndTime !== void 0, () => __serializeDateTime(input[_ET]).toString()],
        [_nt]: [, input[_NT]],
        [_ps]: [, input[_PS]],
        [_st]: [() => input.StartTime !== void 0, () => __serializeDateTime(input[_ST]).toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetApplicationSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/settings");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAppsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps");
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetBaiduChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/baidu");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCampaignCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/campaigns/{CampaignId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("CampaignId", () => input.CampaignId, "{CampaignId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCampaignActivitiesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/campaigns/{CampaignId}/activities");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("CampaignId", () => input.CampaignId, "{CampaignId}", false);
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetCampaignDateRangeKpiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/campaigns/{CampaignId}/kpis/daterange/{KpiName}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("CampaignId", () => input.CampaignId, "{CampaignId}", false);
    b.p("KpiName", () => input.KpiName, "{KpiName}", false);
    const query = map({
        [_et]: [() => input.EndTime !== void 0, () => __serializeDateTime(input[_ET]).toString()],
        [_nt]: [, input[_NT]],
        [_ps]: [, input[_PS]],
        [_st]: [() => input.StartTime !== void 0, () => __serializeDateTime(input[_ST]).toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetCampaignsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/campaigns");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetCampaignVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/campaigns/{CampaignId}/versions/{Version}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("CampaignId", () => input.CampaignId, "{CampaignId}", false);
    b.p("Version", () => input.Version, "{Version}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCampaignVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/campaigns/{CampaignId}/versions");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("CampaignId", () => input.CampaignId, "{CampaignId}", false);
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetChannelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEmailChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/email");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEmailTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/templates/{TemplateName}/email");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_v]: [, input[_V]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetEndpointCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/endpoints/{EndpointId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EndpointId", () => input.EndpointId, "{EndpointId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEventStreamCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/eventstream");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetExportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/jobs/export/{JobId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("JobId", () => input.JobId, "{JobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetExportJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/jobs/export");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetGcmChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/gcm");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetImportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/jobs/import/{JobId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("JobId", () => input.JobId, "{JobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetImportJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/jobs/import");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetInAppMessagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/endpoints/{EndpointId}/inappmessages");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EndpointId", () => input.EndpointId, "{EndpointId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetInAppTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/templates/{TemplateName}/inapp");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_v]: [, input[_V]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetJourneyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/journeys/{JourneyId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("JourneyId", () => input.JourneyId, "{JourneyId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetJourneyDateRangeKpiCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/journeys/{JourneyId}/kpis/daterange/{KpiName}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("JourneyId", () => input.JourneyId, "{JourneyId}", false);
    b.p("KpiName", () => input.KpiName, "{KpiName}", false);
    const query = map({
        [_et]: [() => input.EndTime !== void 0, () => __serializeDateTime(input[_ET]).toString()],
        [_nt]: [, input[_NT]],
        [_ps]: [, input[_PS]],
        [_st]: [() => input.StartTime !== void 0, () => __serializeDateTime(input[_ST]).toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetJourneyExecutionActivityMetricsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/journeys/{JourneyId}/activities/{JourneyActivityId}/execution-metrics");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("JourneyActivityId", () => input.JourneyActivityId, "{JourneyActivityId}", false);
    b.p("JourneyId", () => input.JourneyId, "{JourneyId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_ps]: [, input[_PS]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetJourneyExecutionMetricsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/journeys/{JourneyId}/execution-metrics");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("JourneyId", () => input.JourneyId, "{JourneyId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_ps]: [, input[_PS]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetJourneyRunExecutionActivityMetricsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/journeys/{JourneyId}/runs/{RunId}/activities/{JourneyActivityId}/execution-metrics");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("JourneyActivityId", () => input.JourneyActivityId, "{JourneyActivityId}", false);
    b.p("JourneyId", () => input.JourneyId, "{JourneyId}", false);
    b.p("RunId", () => input.RunId, "{RunId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_ps]: [, input[_PS]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetJourneyRunExecutionMetricsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/journeys/{JourneyId}/runs/{RunId}/execution-metrics");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("JourneyId", () => input.JourneyId, "{JourneyId}", false);
    b.p("RunId", () => input.RunId, "{RunId}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_ps]: [, input[_PS]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetJourneyRunsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/journeys/{JourneyId}/runs");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("JourneyId", () => input.JourneyId, "{JourneyId}", false);
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetPushTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/templates/{TemplateName}/push");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_v]: [, input[_V]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetRecommenderConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/recommenders/{RecommenderId}");
    b.p("RecommenderId", () => input.RecommenderId, "{RecommenderId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRecommenderConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/recommenders");
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetSegmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/segments/{SegmentId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("SegmentId", () => input.SegmentId, "{SegmentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSegmentExportJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/segments/{SegmentId}/jobs/export");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("SegmentId", () => input.SegmentId, "{SegmentId}", false);
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetSegmentImportJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/segments/{SegmentId}/jobs/import");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("SegmentId", () => input.SegmentId, "{SegmentId}", false);
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetSegmentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/segments");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetSegmentVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/segments/{SegmentId}/versions/{Version}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("SegmentId", () => input.SegmentId, "{SegmentId}", false);
    b.p("Version", () => input.Version, "{Version}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSegmentVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/segments/{SegmentId}/versions");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("SegmentId", () => input.SegmentId, "{SegmentId}", false);
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetSmsChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/sms");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSmsTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/templates/{TemplateName}/sms");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_v]: [, input[_V]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetUserEndpointsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/users/{UserId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetVoiceChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/channels/voice");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetVoiceTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/templates/{TemplateName}/voice");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_v]: [, input[_V]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListJourneysCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/apps/{ApplicationId}/journeys");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        [_ps]: [, input[_PS]],
        [_t]: [, input[_T]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/templates");
    const query = map({
        [_nt]: [, input[_NT]],
        [_ps]: [, input[_PS]],
        [_p]: [, input[_P]],
        [_tt]: [, input[_TT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTemplateVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/templates/{TemplateName}/{TemplateType}/versions");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    b.p("TemplateType", () => input.TemplateType, "{TemplateType}", false);
    const query = map({
        [_nt]: [, input[_NT]],
        [_ps]: [, input[_PS]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PhoneNumberValidateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/phone/number/validate");
    let body;
    if (input.NumberValidateRequest !== undefined) {
        body = _json(input.NumberValidateRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutEventsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/events");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.EventsRequest !== undefined) {
        body = se_EventsRequest(input.EventsRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutEventStreamCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/eventstream");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.WriteEventStream !== undefined) {
        body = _json(input.WriteEventStream);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RemoveAttributesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/attributes/{AttributeType}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("AttributeType", () => input.AttributeType, "{AttributeType}", false);
    let body;
    if (input.UpdateAttributesRequest !== undefined) {
        body = _json(input.UpdateAttributesRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_SendMessagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/messages");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.MessageRequest !== undefined) {
        body = se_MessageRequest(input.MessageRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SendOTPMessageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/otp");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.SendOTPMessageRequestParameters !== undefined) {
        body = _json(input.SendOTPMessageRequestParameters);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SendUsersMessagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/users-messages");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.SendUsersMessageRequest !== undefined) {
        body = se_SendUsersMessageRequest(input.SendUsersMessageRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    if (input.TagsModel !== undefined) {
        body = se_TagsModel(input.TagsModel, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [__expectNonNull(input.TagKeys, `TagKeys`) != null, () => input[_TK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAdmChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/channels/adm");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.ADMChannelRequest !== undefined) {
        body = _json(input.ADMChannelRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateApnsChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/channels/apns");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.APNSChannelRequest !== undefined) {
        body = _json(input.APNSChannelRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateApnsSandboxChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/channels/apns_sandbox");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.APNSSandboxChannelRequest !== undefined) {
        body = _json(input.APNSSandboxChannelRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateApnsVoipChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/channels/apns_voip");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.APNSVoipChannelRequest !== undefined) {
        body = _json(input.APNSVoipChannelRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateApnsVoipSandboxChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/channels/apns_voip_sandbox");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.APNSVoipSandboxChannelRequest !== undefined) {
        body = _json(input.APNSVoipSandboxChannelRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateApplicationSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/settings");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.WriteApplicationSettingsRequest !== undefined) {
        body = _json(input.WriteApplicationSettingsRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateBaiduChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/channels/baidu");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.BaiduChannelRequest !== undefined) {
        body = _json(input.BaiduChannelRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateCampaignCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/campaigns/{CampaignId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("CampaignId", () => input.CampaignId, "{CampaignId}", false);
    let body;
    if (input.WriteCampaignRequest !== undefined) {
        body = se_WriteCampaignRequest(input.WriteCampaignRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateEmailChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/channels/email");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.EmailChannelRequest !== undefined) {
        body = _json(input.EmailChannelRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateEmailTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/templates/{TemplateName}/email");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_cnv]: [() => input.CreateNewVersion !== void 0, () => input[_CNV].toString()],
        [_v]: [, input[_V]],
    });
    let body;
    if (input.EmailTemplateRequest !== undefined) {
        body = se_EmailTemplateRequest(input.EmailTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateEndpointCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/endpoints/{EndpointId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("EndpointId", () => input.EndpointId, "{EndpointId}", false);
    let body;
    if (input.EndpointRequest !== undefined) {
        body = se_EndpointRequest(input.EndpointRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateEndpointsBatchCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/endpoints");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.EndpointBatchRequest !== undefined) {
        body = se_EndpointBatchRequest(input.EndpointBatchRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateGcmChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/channels/gcm");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.GCMChannelRequest !== undefined) {
        body = _json(input.GCMChannelRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateInAppTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/templates/{TemplateName}/inapp");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_cnv]: [() => input.CreateNewVersion !== void 0, () => input[_CNV].toString()],
        [_v]: [, input[_V]],
    });
    let body;
    if (input.InAppTemplateRequest !== undefined) {
        body = se_InAppTemplateRequest(input.InAppTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateJourneyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/journeys/{JourneyId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("JourneyId", () => input.JourneyId, "{JourneyId}", false);
    let body;
    if (input.WriteJourneyRequest !== undefined) {
        body = se_WriteJourneyRequest(input.WriteJourneyRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateJourneyStateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/journeys/{JourneyId}/state");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("JourneyId", () => input.JourneyId, "{JourneyId}", false);
    let body;
    if (input.JourneyStateRequest !== undefined) {
        body = _json(input.JourneyStateRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdatePushTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/templates/{TemplateName}/push");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_cnv]: [() => input.CreateNewVersion !== void 0, () => input[_CNV].toString()],
        [_v]: [, input[_V]],
    });
    let body;
    if (input.PushNotificationTemplateRequest !== undefined) {
        body = se_PushNotificationTemplateRequest(input.PushNotificationTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateRecommenderConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/recommenders/{RecommenderId}");
    b.p("RecommenderId", () => input.RecommenderId, "{RecommenderId}", false);
    let body;
    if (input.UpdateRecommenderConfiguration !== undefined) {
        body = _json(input.UpdateRecommenderConfiguration);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateSegmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/segments/{SegmentId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("SegmentId", () => input.SegmentId, "{SegmentId}", false);
    let body;
    if (input.WriteSegmentRequest !== undefined) {
        body = se_WriteSegmentRequest(input.WriteSegmentRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateSmsChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/channels/sms");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.SMSChannelRequest !== undefined) {
        body = _json(input.SMSChannelRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateSmsTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/templates/{TemplateName}/sms");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_cnv]: [() => input.CreateNewVersion !== void 0, () => input[_CNV].toString()],
        [_v]: [, input[_V]],
    });
    let body;
    if (input.SMSTemplateRequest !== undefined) {
        body = se_SMSTemplateRequest(input.SMSTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateTemplateActiveVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/templates/{TemplateName}/{TemplateType}/active-version");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    b.p("TemplateType", () => input.TemplateType, "{TemplateType}", false);
    let body;
    if (input.TemplateActiveVersionRequest !== undefined) {
        body = _json(input.TemplateActiveVersionRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateVoiceChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/channels/voice");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.VoiceChannelRequest !== undefined) {
        body = _json(input.VoiceChannelRequest);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateVoiceTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/templates/{TemplateName}/voice");
    b.p("TemplateName", () => input.TemplateName, "{TemplateName}", false);
    const query = map({
        [_cnv]: [() => input.CreateNewVersion !== void 0, () => input[_CNV].toString()],
        [_v]: [, input[_V]],
    });
    let body;
    if (input.VoiceTemplateRequest !== undefined) {
        body = se_VoiceTemplateRequest(input.VoiceTemplateRequest, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_VerifyOTPMessageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/apps/{ApplicationId}/verify-otp");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    if (input.VerifyOTPMessageRequestParameters !== undefined) {
        body = _json(input.VerifyOTPMessageRequestParameters);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_CreateAppCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ApplicationResponse = de_ApplicationResponse(data, context);
    return contents;
};
export const de_CreateCampaignCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.CampaignResponse = de_CampaignResponse(data, context);
    return contents;
};
export const de_CreateEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.CreateTemplateMessageBody = _json(data);
    return contents;
};
export const de_CreateExportJobCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ExportJobResponse = _json(data);
    return contents;
};
export const de_CreateImportJobCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ImportJobResponse = _json(data);
    return contents;
};
export const de_CreateInAppTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.TemplateCreateMessageBody = _json(data);
    return contents;
};
export const de_CreateJourneyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.JourneyResponse = de_JourneyResponse(data, context);
    return contents;
};
export const de_CreatePushTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.CreateTemplateMessageBody = _json(data);
    return contents;
};
export const de_CreateRecommenderConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.RecommenderConfigurationResponse = _json(data);
    return contents;
};
export const de_CreateSegmentCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.SegmentResponse = de_SegmentResponse(data, context);
    return contents;
};
export const de_CreateSmsTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.CreateTemplateMessageBody = _json(data);
    return contents;
};
export const de_CreateVoiceTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.CreateTemplateMessageBody = _json(data);
    return contents;
};
export const de_DeleteAdmChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ADMChannelResponse = _json(data);
    return contents;
};
export const de_DeleteApnsChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.APNSChannelResponse = _json(data);
    return contents;
};
export const de_DeleteApnsSandboxChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.APNSSandboxChannelResponse = _json(data);
    return contents;
};
export const de_DeleteApnsVoipChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.APNSVoipChannelResponse = _json(data);
    return contents;
};
export const de_DeleteApnsVoipSandboxChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.APNSVoipSandboxChannelResponse = _json(data);
    return contents;
};
export const de_DeleteAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ApplicationResponse = de_ApplicationResponse(data, context);
    return contents;
};
export const de_DeleteBaiduChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.BaiduChannelResponse = _json(data);
    return contents;
};
export const de_DeleteCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.CampaignResponse = de_CampaignResponse(data, context);
    return contents;
};
export const de_DeleteEmailChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.EmailChannelResponse = _json(data);
    return contents;
};
export const de_DeleteEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_DeleteEndpointCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.EndpointResponse = de_EndpointResponse(data, context);
    return contents;
};
export const de_DeleteEventStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.EventStream = _json(data);
    return contents;
};
export const de_DeleteGcmChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.GCMChannelResponse = _json(data);
    return contents;
};
export const de_DeleteInAppTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_DeleteJourneyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.JourneyResponse = de_JourneyResponse(data, context);
    return contents;
};
export const de_DeletePushTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_DeleteRecommenderConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.RecommenderConfigurationResponse = _json(data);
    return contents;
};
export const de_DeleteSegmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.SegmentResponse = de_SegmentResponse(data, context);
    return contents;
};
export const de_DeleteSmsChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.SMSChannelResponse = _json(data);
    return contents;
};
export const de_DeleteSmsTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_DeleteUserEndpointsCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.EndpointsResponse = de_EndpointsResponse(data, context);
    return contents;
};
export const de_DeleteVoiceChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.VoiceChannelResponse = _json(data);
    return contents;
};
export const de_DeleteVoiceTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_GetAdmChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ADMChannelResponse = _json(data);
    return contents;
};
export const de_GetApnsChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.APNSChannelResponse = _json(data);
    return contents;
};
export const de_GetApnsSandboxChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.APNSSandboxChannelResponse = _json(data);
    return contents;
};
export const de_GetApnsVoipChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.APNSVoipChannelResponse = _json(data);
    return contents;
};
export const de_GetApnsVoipSandboxChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.APNSVoipSandboxChannelResponse = _json(data);
    return contents;
};
export const de_GetAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ApplicationResponse = de_ApplicationResponse(data, context);
    return contents;
};
export const de_GetApplicationDateRangeKpiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ApplicationDateRangeKpiResponse = de_ApplicationDateRangeKpiResponse(data, context);
    return contents;
};
export const de_GetApplicationSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ApplicationSettingsResource = _json(data);
    return contents;
};
export const de_GetAppsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ApplicationsResponse = de_ApplicationsResponse(data, context);
    return contents;
};
export const de_GetBaiduChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.BaiduChannelResponse = _json(data);
    return contents;
};
export const de_GetCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.CampaignResponse = de_CampaignResponse(data, context);
    return contents;
};
export const de_GetCampaignActivitiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ActivitiesResponse = _json(data);
    return contents;
};
export const de_GetCampaignDateRangeKpiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.CampaignDateRangeKpiResponse = de_CampaignDateRangeKpiResponse(data, context);
    return contents;
};
export const de_GetCampaignsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.CampaignsResponse = de_CampaignsResponse(data, context);
    return contents;
};
export const de_GetCampaignVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.CampaignResponse = de_CampaignResponse(data, context);
    return contents;
};
export const de_GetCampaignVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.CampaignsResponse = de_CampaignsResponse(data, context);
    return contents;
};
export const de_GetChannelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ChannelsResponse = _json(data);
    return contents;
};
export const de_GetEmailChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.EmailChannelResponse = _json(data);
    return contents;
};
export const de_GetEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.EmailTemplateResponse = de_EmailTemplateResponse(data, context);
    return contents;
};
export const de_GetEndpointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.EndpointResponse = de_EndpointResponse(data, context);
    return contents;
};
export const de_GetEventStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.EventStream = _json(data);
    return contents;
};
export const de_GetExportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ExportJobResponse = _json(data);
    return contents;
};
export const de_GetExportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ExportJobsResponse = _json(data);
    return contents;
};
export const de_GetGcmChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.GCMChannelResponse = _json(data);
    return contents;
};
export const de_GetImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ImportJobResponse = _json(data);
    return contents;
};
export const de_GetImportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ImportJobsResponse = _json(data);
    return contents;
};
export const de_GetInAppMessagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.InAppMessagesResponse = de_InAppMessagesResponse(data, context);
    return contents;
};
export const de_GetInAppTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.InAppTemplateResponse = de_InAppTemplateResponse(data, context);
    return contents;
};
export const de_GetJourneyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.JourneyResponse = de_JourneyResponse(data, context);
    return contents;
};
export const de_GetJourneyDateRangeKpiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.JourneyDateRangeKpiResponse = de_JourneyDateRangeKpiResponse(data, context);
    return contents;
};
export const de_GetJourneyExecutionActivityMetricsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.JourneyExecutionActivityMetricsResponse = _json(data);
    return contents;
};
export const de_GetJourneyExecutionMetricsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.JourneyExecutionMetricsResponse = _json(data);
    return contents;
};
export const de_GetJourneyRunExecutionActivityMetricsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.JourneyRunExecutionActivityMetricsResponse = _json(data);
    return contents;
};
export const de_GetJourneyRunExecutionMetricsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.JourneyRunExecutionMetricsResponse = _json(data);
    return contents;
};
export const de_GetJourneyRunsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.JourneyRunsResponse = _json(data);
    return contents;
};
export const de_GetPushTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.PushNotificationTemplateResponse = de_PushNotificationTemplateResponse(data, context);
    return contents;
};
export const de_GetRecommenderConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.RecommenderConfigurationResponse = _json(data);
    return contents;
};
export const de_GetRecommenderConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ListRecommenderConfigurationsResponse = _json(data);
    return contents;
};
export const de_GetSegmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.SegmentResponse = de_SegmentResponse(data, context);
    return contents;
};
export const de_GetSegmentExportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ExportJobsResponse = _json(data);
    return contents;
};
export const de_GetSegmentImportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ImportJobsResponse = _json(data);
    return contents;
};
export const de_GetSegmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.SegmentsResponse = de_SegmentsResponse(data, context);
    return contents;
};
export const de_GetSegmentVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.SegmentResponse = de_SegmentResponse(data, context);
    return contents;
};
export const de_GetSegmentVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.SegmentsResponse = de_SegmentsResponse(data, context);
    return contents;
};
export const de_GetSmsChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.SMSChannelResponse = _json(data);
    return contents;
};
export const de_GetSmsTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.SMSTemplateResponse = de_SMSTemplateResponse(data, context);
    return contents;
};
export const de_GetUserEndpointsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.EndpointsResponse = de_EndpointsResponse(data, context);
    return contents;
};
export const de_GetVoiceChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.VoiceChannelResponse = _json(data);
    return contents;
};
export const de_GetVoiceTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.VoiceTemplateResponse = de_VoiceTemplateResponse(data, context);
    return contents;
};
export const de_ListJourneysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.JourneysResponse = de_JourneysResponse(data, context);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.TagsModel = de_TagsModel(data, context);
    return contents;
};
export const de_ListTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.TemplatesResponse = de_TemplatesResponse(data, context);
    return contents;
};
export const de_ListTemplateVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.TemplateVersionsResponse = _json(data);
    return contents;
};
export const de_PhoneNumberValidateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.NumberValidateResponse = _json(data);
    return contents;
};
export const de_PutEventsCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.EventsResponse = _json(data);
    return contents;
};
export const de_PutEventStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.EventStream = _json(data);
    return contents;
};
export const de_RemoveAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.AttributesResource = _json(data);
    return contents;
};
export const de_SendMessagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageResponse = _json(data);
    return contents;
};
export const de_SendOTPMessageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageResponse = _json(data);
    return contents;
};
export const de_SendUsersMessagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.SendUsersMessageResponse = _json(data);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAdmChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ADMChannelResponse = _json(data);
    return contents;
};
export const de_UpdateApnsChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.APNSChannelResponse = _json(data);
    return contents;
};
export const de_UpdateApnsSandboxChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.APNSSandboxChannelResponse = _json(data);
    return contents;
};
export const de_UpdateApnsVoipChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.APNSVoipChannelResponse = _json(data);
    return contents;
};
export const de_UpdateApnsVoipSandboxChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.APNSVoipSandboxChannelResponse = _json(data);
    return contents;
};
export const de_UpdateApplicationSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.ApplicationSettingsResource = _json(data);
    return contents;
};
export const de_UpdateBaiduChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.BaiduChannelResponse = _json(data);
    return contents;
};
export const de_UpdateCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.CampaignResponse = de_CampaignResponse(data, context);
    return contents;
};
export const de_UpdateEmailChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.EmailChannelResponse = _json(data);
    return contents;
};
export const de_UpdateEmailTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_UpdateEndpointCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_UpdateEndpointsBatchCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_UpdateGcmChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.GCMChannelResponse = _json(data);
    return contents;
};
export const de_UpdateInAppTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_UpdateJourneyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.JourneyResponse = de_JourneyResponse(data, context);
    return contents;
};
export const de_UpdateJourneyStateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.JourneyResponse = de_JourneyResponse(data, context);
    return contents;
};
export const de_UpdatePushTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_UpdateRecommenderConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.RecommenderConfigurationResponse = _json(data);
    return contents;
};
export const de_UpdateSegmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.SegmentResponse = de_SegmentResponse(data, context);
    return contents;
};
export const de_UpdateSmsChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.SMSChannelResponse = _json(data);
    return contents;
};
export const de_UpdateSmsTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_UpdateTemplateActiveVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_UpdateVoiceChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.VoiceChannelResponse = _json(data);
    return contents;
};
export const de_UpdateVoiceTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.MessageBody = _json(data);
    return contents;
};
export const de_VerifyOTPMessageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.VerificationResponse = _json(data);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.pinpoint#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.pinpoint#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.pinpoint#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.pinpoint#MethodNotAllowedException":
            throw await de_MethodNotAllowedExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.pinpoint#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "PayloadTooLargeException":
        case "com.amazonaws.pinpoint#PayloadTooLargeException":
            throw await de_PayloadTooLargeExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.pinpoint#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.pinpoint#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestID: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestID: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestID: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestID: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_MethodNotAllowedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestID: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new MethodNotAllowedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestID: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_PayloadTooLargeExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestID: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new PayloadTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        RequestID: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_Activity = (input, context) => {
    return take(input, {
        CUSTOM: _json,
        ConditionalSplit: (_) => se_ConditionalSplitActivity(_, context),
        ContactCenter: _json,
        Description: [],
        EMAIL: _json,
        Holdout: _json,
        MultiCondition: (_) => se_MultiConditionalSplitActivity(_, context),
        PUSH: _json,
        RandomSplit: _json,
        SMS: _json,
        Wait: _json,
    });
};
const se_CampaignEventFilter = (input, context) => {
    return take(input, {
        Dimensions: (_) => se_EventDimensions(_, context),
        FilterType: [],
    });
};
const se_Condition = (input, context) => {
    return take(input, {
        Conditions: (_) => se_ListOfSimpleCondition(_, context),
        Operator: [],
    });
};
const se_ConditionalSplitActivity = (input, context) => {
    return take(input, {
        Condition: (_) => se_Condition(_, context),
        EvaluationWaitTime: _json,
        FalseActivity: [],
        TrueActivity: [],
    });
};
const se_CreateApplicationRequest = (input, context) => {
    return take(input, {
        Name: [],
        tags: [, _json, `tags`],
    });
};
const se_DirectMessageConfiguration = (input, context) => {
    return take(input, {
        ADMMessage: _json,
        APNSMessage: _json,
        BaiduMessage: _json,
        DefaultMessage: _json,
        DefaultPushNotificationMessage: _json,
        EmailMessage: (_) => se_EmailMessage(_, context),
        GCMMessage: _json,
        SMSMessage: _json,
        VoiceMessage: _json,
    });
};
const se_EmailMessage = (input, context) => {
    return take(input, {
        Body: [],
        FeedbackForwardingAddress: [],
        FromAddress: [],
        RawEmail: (_) => se_RawEmail(_, context),
        ReplyToAddresses: _json,
        SimpleEmail: _json,
        Substitutions: _json,
    });
};
const se_EmailTemplateRequest = (input, context) => {
    return take(input, {
        DefaultSubstitutions: [],
        Headers: _json,
        HtmlPart: [],
        RecommenderId: [],
        Subject: [],
        TemplateDescription: [],
        TextPart: [],
        tags: [, _json, `tags`],
    });
};
const se_EndpointBatchItem = (input, context) => {
    return take(input, {
        Address: [],
        Attributes: _json,
        ChannelType: [],
        Demographic: _json,
        EffectiveDate: [],
        EndpointStatus: [],
        Id: [],
        Location: (_) => se_EndpointLocation(_, context),
        Metrics: (_) => se_MapOf__double(_, context),
        OptOut: [],
        RequestId: [],
        User: _json,
    });
};
const se_EndpointBatchRequest = (input, context) => {
    return take(input, {
        Item: (_) => se_ListOfEndpointBatchItem(_, context),
    });
};
const se_EndpointLocation = (input, context) => {
    return take(input, {
        City: [],
        Country: [],
        Latitude: __serializeFloat,
        Longitude: __serializeFloat,
        PostalCode: [],
        Region: [],
    });
};
const se_EndpointRequest = (input, context) => {
    return take(input, {
        Address: [],
        Attributes: _json,
        ChannelType: [],
        Demographic: _json,
        EffectiveDate: [],
        EndpointStatus: [],
        Location: (_) => se_EndpointLocation(_, context),
        Metrics: (_) => se_MapOf__double(_, context),
        OptOut: [],
        RequestId: [],
        User: _json,
    });
};
const se_Event = (input, context) => {
    return take(input, {
        AppPackageName: [],
        AppTitle: [],
        AppVersionCode: [],
        Attributes: _json,
        ClientSdkVersion: [],
        EventType: [],
        Metrics: (_) => se_MapOf__double(_, context),
        SdkName: [],
        Session: _json,
        Timestamp: [],
    });
};
const se_EventCondition = (input, context) => {
    return take(input, {
        Dimensions: (_) => se_EventDimensions(_, context),
        MessageActivity: [],
    });
};
const se_EventDimensions = (input, context) => {
    return take(input, {
        Attributes: _json,
        EventType: _json,
        Metrics: (_) => se_MapOfMetricDimension(_, context),
    });
};
const se_EventFilter = (input, context) => {
    return take(input, {
        Dimensions: (_) => se_EventDimensions(_, context),
        FilterType: [],
    });
};
const se_EventsBatch = (input, context) => {
    return take(input, {
        Endpoint: (_) => se_PublicEndpoint(_, context),
        Events: (_) => se_MapOfEvent(_, context),
    });
};
const se_EventsRequest = (input, context) => {
    return take(input, {
        BatchItem: (_) => se_MapOfEventsBatch(_, context),
    });
};
const se_EventStartCondition = (input, context) => {
    return take(input, {
        EventFilter: (_) => se_EventFilter(_, context),
        SegmentId: [],
    });
};
const se_GPSCoordinates = (input, context) => {
    return take(input, {
        Latitude: __serializeFloat,
        Longitude: __serializeFloat,
    });
};
const se_GPSPointDimension = (input, context) => {
    return take(input, {
        Coordinates: (_) => se_GPSCoordinates(_, context),
        RangeInKilometers: __serializeFloat,
    });
};
const se_InAppTemplateRequest = (input, context) => {
    return take(input, {
        Content: _json,
        CustomConfig: _json,
        Layout: [],
        TemplateDescription: [],
        tags: [, _json, `tags`],
    });
};
const se_JourneySchedule = (input, context) => {
    return take(input, {
        EndTime: __serializeDateTime,
        StartTime: __serializeDateTime,
        Timezone: [],
    });
};
const se_ListOfEndpointBatchItem = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_EndpointBatchItem(entry, context);
    });
};
const se_ListOfMultiConditionalBranch = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MultiConditionalBranch(entry, context);
    });
};
const se_ListOfSegmentDimensions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SegmentDimensions(entry, context);
    });
};
const se_ListOfSegmentGroup = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SegmentGroup(entry, context);
    });
};
const se_ListOfSimpleCondition = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SimpleCondition(entry, context);
    });
};
const se_ListOfWriteTreatmentResource = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_WriteTreatmentResource(entry, context);
    });
};
const se_MapOf__double = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __serializeFloat(value);
        return acc;
    }, {});
};
const se_MapOfActivity = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_Activity(value, context);
        return acc;
    }, {});
};
const se_MapOfEvent = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_Event(value, context);
        return acc;
    }, {});
};
const se_MapOfEventsBatch = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_EventsBatch(value, context);
        return acc;
    }, {});
};
const se_MapOfMetricDimension = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_MetricDimension(value, context);
        return acc;
    }, {});
};
const se_MessageRequest = (input, context) => {
    return take(input, {
        Addresses: _json,
        Context: _json,
        Endpoints: _json,
        MessageConfiguration: (_) => se_DirectMessageConfiguration(_, context),
        TemplateConfiguration: _json,
        TraceId: [],
    });
};
const se_MetricDimension = (input, context) => {
    return take(input, {
        ComparisonOperator: [],
        Value: __serializeFloat,
    });
};
const se_MultiConditionalBranch = (input, context) => {
    return take(input, {
        Condition: (_) => se_SimpleCondition(_, context),
        NextActivity: [],
    });
};
const se_MultiConditionalSplitActivity = (input, context) => {
    return take(input, {
        Branches: (_) => se_ListOfMultiConditionalBranch(_, context),
        DefaultActivity: [],
        EvaluationWaitTime: _json,
    });
};
const se_PublicEndpoint = (input, context) => {
    return take(input, {
        Address: [],
        Attributes: _json,
        ChannelType: [],
        Demographic: _json,
        EffectiveDate: [],
        EndpointStatus: [],
        Location: (_) => se_EndpointLocation(_, context),
        Metrics: (_) => se_MapOf__double(_, context),
        OptOut: [],
        RequestId: [],
        User: _json,
    });
};
const se_PushNotificationTemplateRequest = (input, context) => {
    return take(input, {
        ADM: _json,
        APNS: _json,
        Baidu: _json,
        Default: _json,
        DefaultSubstitutions: [],
        GCM: _json,
        RecommenderId: [],
        TemplateDescription: [],
        tags: [, _json, `tags`],
    });
};
const se_RawEmail = (input, context) => {
    return take(input, {
        Data: context.base64Encoder,
    });
};
const se_Schedule = (input, context) => {
    return take(input, {
        EndTime: [],
        EventFilter: (_) => se_CampaignEventFilter(_, context),
        Frequency: [],
        IsLocalTime: [],
        QuietTime: _json,
        StartTime: [],
        Timezone: [],
    });
};
const se_SegmentDimensions = (input, context) => {
    return take(input, {
        Attributes: _json,
        Behavior: _json,
        Demographic: _json,
        Location: (_) => se_SegmentLocation(_, context),
        Metrics: (_) => se_MapOfMetricDimension(_, context),
        UserAttributes: _json,
    });
};
const se_SegmentGroup = (input, context) => {
    return take(input, {
        Dimensions: (_) => se_ListOfSegmentDimensions(_, context),
        SourceSegments: _json,
        SourceType: [],
        Type: [],
    });
};
const se_SegmentGroupList = (input, context) => {
    return take(input, {
        Groups: (_) => se_ListOfSegmentGroup(_, context),
        Include: [],
    });
};
const se_SegmentLocation = (input, context) => {
    return take(input, {
        Country: _json,
        GPSPoint: (_) => se_GPSPointDimension(_, context),
    });
};
const se_SendUsersMessageRequest = (input, context) => {
    return take(input, {
        Context: _json,
        MessageConfiguration: (_) => se_DirectMessageConfiguration(_, context),
        TemplateConfiguration: _json,
        TraceId: [],
        Users: _json,
    });
};
const se_SimpleCondition = (input, context) => {
    return take(input, {
        EventCondition: (_) => se_EventCondition(_, context),
        SegmentCondition: _json,
        segmentDimensions: [, (_) => se_SegmentDimensions(_, context), `SegmentDimensions`],
    });
};
const se_SMSTemplateRequest = (input, context) => {
    return take(input, {
        Body: [],
        DefaultSubstitutions: [],
        RecommenderId: [],
        TemplateDescription: [],
        tags: [, _json, `tags`],
    });
};
const se_StartCondition = (input, context) => {
    return take(input, {
        Description: [],
        EventStartCondition: (_) => se_EventStartCondition(_, context),
        SegmentStartCondition: _json,
    });
};
const se_TagsModel = (input, context) => {
    return take(input, {
        tags: [, _json, `tags`],
    });
};
const se_VoiceTemplateRequest = (input, context) => {
    return take(input, {
        Body: [],
        DefaultSubstitutions: [],
        LanguageCode: [],
        TemplateDescription: [],
        VoiceId: [],
        tags: [, _json, `tags`],
    });
};
const se_WriteCampaignRequest = (input, context) => {
    return take(input, {
        AdditionalTreatments: (_) => se_ListOfWriteTreatmentResource(_, context),
        CustomDeliveryConfiguration: _json,
        Description: [],
        HoldoutPercent: [],
        Hook: _json,
        IsPaused: [],
        Limits: _json,
        MessageConfiguration: _json,
        Name: [],
        Priority: [],
        Schedule: (_) => se_Schedule(_, context),
        SegmentId: [],
        SegmentVersion: [],
        TemplateConfiguration: _json,
        TreatmentDescription: [],
        TreatmentName: [],
        tags: [, _json, `tags`],
    });
};
const se_WriteJourneyRequest = (input, context) => {
    return take(input, {
        Activities: (_) => se_MapOfActivity(_, context),
        ClosedDays: _json,
        CreationDate: [],
        JourneyChannelSettings: _json,
        LastModifiedDate: [],
        Limits: _json,
        LocalTime: [],
        Name: [],
        OpenHours: _json,
        QuietTime: _json,
        RefreshFrequency: [],
        RefreshOnSegmentUpdate: [],
        Schedule: (_) => se_JourneySchedule(_, context),
        SendingSchedule: [],
        StartActivity: [],
        StartCondition: (_) => se_StartCondition(_, context),
        State: [],
        TimezoneEstimationMethods: _json,
        WaitForQuietTime: [],
    });
};
const se_WriteSegmentRequest = (input, context) => {
    return take(input, {
        Dimensions: (_) => se_SegmentDimensions(_, context),
        Name: [],
        SegmentGroups: (_) => se_SegmentGroupList(_, context),
        tags: [, _json, `tags`],
    });
};
const se_WriteTreatmentResource = (input, context) => {
    return take(input, {
        CustomDeliveryConfiguration: _json,
        MessageConfiguration: _json,
        Schedule: (_) => se_Schedule(_, context),
        SizePercent: [],
        TemplateConfiguration: _json,
        TreatmentDescription: [],
        TreatmentName: [],
    });
};
const de_Activity = (output, context) => {
    return take(output, {
        CUSTOM: _json,
        ConditionalSplit: (_) => de_ConditionalSplitActivity(_, context),
        ContactCenter: _json,
        Description: __expectString,
        EMAIL: _json,
        Holdout: _json,
        MultiCondition: (_) => de_MultiConditionalSplitActivity(_, context),
        PUSH: _json,
        RandomSplit: _json,
        SMS: _json,
        Wait: _json,
    });
};
const de_ApplicationDateRangeKpiResponse = (output, context) => {
    return take(output, {
        ApplicationId: __expectString,
        EndTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        KpiName: __expectString,
        KpiResult: _json,
        NextToken: __expectString,
        StartTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_ApplicationResponse = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationDate: __expectString,
        Id: __expectString,
        Name: __expectString,
        tags: [, _json, `tags`],
    });
};
const de_ApplicationsResponse = (output, context) => {
    return take(output, {
        Item: (_) => de_ListOfApplicationResponse(_, context),
        NextToken: __expectString,
    });
};
const de_CampaignDateRangeKpiResponse = (output, context) => {
    return take(output, {
        ApplicationId: __expectString,
        CampaignId: __expectString,
        EndTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        KpiName: __expectString,
        KpiResult: _json,
        NextToken: __expectString,
        StartTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_CampaignEventFilter = (output, context) => {
    return take(output, {
        Dimensions: (_) => de_EventDimensions(_, context),
        FilterType: __expectString,
    });
};
const de_CampaignResponse = (output, context) => {
    return take(output, {
        AdditionalTreatments: (_) => de_ListOfTreatmentResource(_, context),
        ApplicationId: __expectString,
        Arn: __expectString,
        CreationDate: __expectString,
        CustomDeliveryConfiguration: _json,
        DefaultState: _json,
        Description: __expectString,
        HoldoutPercent: __expectInt32,
        Hook: _json,
        Id: __expectString,
        IsPaused: __expectBoolean,
        LastModifiedDate: __expectString,
        Limits: _json,
        MessageConfiguration: _json,
        Name: __expectString,
        Priority: __expectInt32,
        Schedule: (_) => de_Schedule(_, context),
        SegmentId: __expectString,
        SegmentVersion: __expectInt32,
        State: _json,
        TemplateConfiguration: _json,
        TreatmentDescription: __expectString,
        TreatmentName: __expectString,
        Version: __expectInt32,
        tags: [, _json, `tags`],
    });
};
const de_CampaignsResponse = (output, context) => {
    return take(output, {
        Item: (_) => de_ListOfCampaignResponse(_, context),
        NextToken: __expectString,
    });
};
const de_Condition = (output, context) => {
    return take(output, {
        Conditions: (_) => de_ListOfSimpleCondition(_, context),
        Operator: __expectString,
    });
};
const de_ConditionalSplitActivity = (output, context) => {
    return take(output, {
        Condition: (_) => de_Condition(_, context),
        EvaluationWaitTime: _json,
        FalseActivity: __expectString,
        TrueActivity: __expectString,
    });
};
const de_EmailTemplateResponse = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationDate: __expectString,
        DefaultSubstitutions: __expectString,
        Headers: _json,
        HtmlPart: __expectString,
        LastModifiedDate: __expectString,
        RecommenderId: __expectString,
        Subject: __expectString,
        TemplateDescription: __expectString,
        TemplateName: __expectString,
        TemplateType: __expectString,
        TextPart: __expectString,
        Version: __expectString,
        tags: [, _json, `tags`],
    });
};
const de_EndpointLocation = (output, context) => {
    return take(output, {
        City: __expectString,
        Country: __expectString,
        Latitude: __limitedParseDouble,
        Longitude: __limitedParseDouble,
        PostalCode: __expectString,
        Region: __expectString,
    });
};
const de_EndpointResponse = (output, context) => {
    return take(output, {
        Address: __expectString,
        ApplicationId: __expectString,
        Attributes: _json,
        ChannelType: __expectString,
        CohortId: __expectString,
        CreationDate: __expectString,
        Demographic: _json,
        EffectiveDate: __expectString,
        EndpointStatus: __expectString,
        Id: __expectString,
        Location: (_) => de_EndpointLocation(_, context),
        Metrics: (_) => de_MapOf__double(_, context),
        OptOut: __expectString,
        RequestId: __expectString,
        User: _json,
    });
};
const de_EndpointsResponse = (output, context) => {
    return take(output, {
        Item: (_) => de_ListOfEndpointResponse(_, context),
    });
};
const de_EventCondition = (output, context) => {
    return take(output, {
        Dimensions: (_) => de_EventDimensions(_, context),
        MessageActivity: __expectString,
    });
};
const de_EventDimensions = (output, context) => {
    return take(output, {
        Attributes: _json,
        EventType: _json,
        Metrics: (_) => de_MapOfMetricDimension(_, context),
    });
};
const de_EventFilter = (output, context) => {
    return take(output, {
        Dimensions: (_) => de_EventDimensions(_, context),
        FilterType: __expectString,
    });
};
const de_EventStartCondition = (output, context) => {
    return take(output, {
        EventFilter: (_) => de_EventFilter(_, context),
        SegmentId: __expectString,
    });
};
const de_GPSCoordinates = (output, context) => {
    return take(output, {
        Latitude: __limitedParseDouble,
        Longitude: __limitedParseDouble,
    });
};
const de_GPSPointDimension = (output, context) => {
    return take(output, {
        Coordinates: (_) => de_GPSCoordinates(_, context),
        RangeInKilometers: __limitedParseDouble,
    });
};
const de_InAppCampaignSchedule = (output, context) => {
    return take(output, {
        EndDate: __expectString,
        EventFilter: (_) => de_CampaignEventFilter(_, context),
        QuietTime: _json,
    });
};
const de_InAppMessageCampaign = (output, context) => {
    return take(output, {
        CampaignId: __expectString,
        DailyCap: __expectInt32,
        InAppMessage: _json,
        Priority: __expectInt32,
        Schedule: (_) => de_InAppCampaignSchedule(_, context),
        SessionCap: __expectInt32,
        TotalCap: __expectInt32,
        TreatmentId: __expectString,
    });
};
const de_InAppMessagesResponse = (output, context) => {
    return take(output, {
        InAppMessageCampaigns: (_) => de_ListOfInAppMessageCampaign(_, context),
    });
};
const de_InAppTemplateResponse = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Content: _json,
        CreationDate: __expectString,
        CustomConfig: _json,
        LastModifiedDate: __expectString,
        Layout: __expectString,
        TemplateDescription: __expectString,
        TemplateName: __expectString,
        TemplateType: __expectString,
        Version: __expectString,
        tags: [, _json, `tags`],
    });
};
const de_JourneyDateRangeKpiResponse = (output, context) => {
    return take(output, {
        ApplicationId: __expectString,
        EndTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        JourneyId: __expectString,
        KpiName: __expectString,
        KpiResult: _json,
        NextToken: __expectString,
        StartTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_JourneyResponse = (output, context) => {
    return take(output, {
        Activities: (_) => de_MapOfActivity(_, context),
        ApplicationId: __expectString,
        ClosedDays: _json,
        CreationDate: __expectString,
        Id: __expectString,
        JourneyChannelSettings: _json,
        LastModifiedDate: __expectString,
        Limits: _json,
        LocalTime: __expectBoolean,
        Name: __expectString,
        OpenHours: _json,
        QuietTime: _json,
        RefreshFrequency: __expectString,
        RefreshOnSegmentUpdate: __expectBoolean,
        Schedule: (_) => de_JourneySchedule(_, context),
        SendingSchedule: __expectBoolean,
        StartActivity: __expectString,
        StartCondition: (_) => de_StartCondition(_, context),
        State: __expectString,
        TimezoneEstimationMethods: _json,
        WaitForQuietTime: __expectBoolean,
        tags: [, _json, `tags`],
    });
};
const de_JourneySchedule = (output, context) => {
    return take(output, {
        EndTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        StartTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Timezone: __expectString,
    });
};
const de_JourneysResponse = (output, context) => {
    return take(output, {
        Item: (_) => de_ListOfJourneyResponse(_, context),
        NextToken: __expectString,
    });
};
const de_ListOfApplicationResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationResponse(entry, context);
    });
    return retVal;
};
const de_ListOfCampaignResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CampaignResponse(entry, context);
    });
    return retVal;
};
const de_ListOfEndpointResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EndpointResponse(entry, context);
    });
    return retVal;
};
const de_ListOfInAppMessageCampaign = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InAppMessageCampaign(entry, context);
    });
    return retVal;
};
const de_ListOfJourneyResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JourneyResponse(entry, context);
    });
    return retVal;
};
const de_ListOfMultiConditionalBranch = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MultiConditionalBranch(entry, context);
    });
    return retVal;
};
const de_ListOfSegmentDimensions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SegmentDimensions(entry, context);
    });
    return retVal;
};
const de_ListOfSegmentGroup = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SegmentGroup(entry, context);
    });
    return retVal;
};
const de_ListOfSegmentResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SegmentResponse(entry, context);
    });
    return retVal;
};
const de_ListOfSimpleCondition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SimpleCondition(entry, context);
    });
    return retVal;
};
const de_ListOfTemplateResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TemplateResponse(entry, context);
    });
    return retVal;
};
const de_ListOfTreatmentResource = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TreatmentResource(entry, context);
    });
    return retVal;
};
const de_MapOf__double = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __limitedParseDouble(value);
        return acc;
    }, {});
};
const de_MapOfActivity = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_Activity(value, context);
        return acc;
    }, {});
};
const de_MapOfMetricDimension = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_MetricDimension(value, context);
        return acc;
    }, {});
};
const de_MetricDimension = (output, context) => {
    return take(output, {
        ComparisonOperator: __expectString,
        Value: __limitedParseDouble,
    });
};
const de_MultiConditionalBranch = (output, context) => {
    return take(output, {
        Condition: (_) => de_SimpleCondition(_, context),
        NextActivity: __expectString,
    });
};
const de_MultiConditionalSplitActivity = (output, context) => {
    return take(output, {
        Branches: (_) => de_ListOfMultiConditionalBranch(_, context),
        DefaultActivity: __expectString,
        EvaluationWaitTime: _json,
    });
};
const de_PushNotificationTemplateResponse = (output, context) => {
    return take(output, {
        ADM: _json,
        APNS: _json,
        Arn: __expectString,
        Baidu: _json,
        CreationDate: __expectString,
        Default: _json,
        DefaultSubstitutions: __expectString,
        GCM: _json,
        LastModifiedDate: __expectString,
        RecommenderId: __expectString,
        TemplateDescription: __expectString,
        TemplateName: __expectString,
        TemplateType: __expectString,
        Version: __expectString,
        tags: [, _json, `tags`],
    });
};
const de_Schedule = (output, context) => {
    return take(output, {
        EndTime: __expectString,
        EventFilter: (_) => de_CampaignEventFilter(_, context),
        Frequency: __expectString,
        IsLocalTime: __expectBoolean,
        QuietTime: _json,
        StartTime: __expectString,
        Timezone: __expectString,
    });
};
const de_SegmentDimensions = (output, context) => {
    return take(output, {
        Attributes: _json,
        Behavior: _json,
        Demographic: _json,
        Location: (_) => de_SegmentLocation(_, context),
        Metrics: (_) => de_MapOfMetricDimension(_, context),
        UserAttributes: _json,
    });
};
const de_SegmentGroup = (output, context) => {
    return take(output, {
        Dimensions: (_) => de_ListOfSegmentDimensions(_, context),
        SourceSegments: _json,
        SourceType: __expectString,
        Type: __expectString,
    });
};
const de_SegmentGroupList = (output, context) => {
    return take(output, {
        Groups: (_) => de_ListOfSegmentGroup(_, context),
        Include: __expectString,
    });
};
const de_SegmentLocation = (output, context) => {
    return take(output, {
        Country: _json,
        GPSPoint: (_) => de_GPSPointDimension(_, context),
    });
};
const de_SegmentResponse = (output, context) => {
    return take(output, {
        ApplicationId: __expectString,
        Arn: __expectString,
        CreationDate: __expectString,
        Dimensions: (_) => de_SegmentDimensions(_, context),
        Id: __expectString,
        ImportDefinition: _json,
        LastModifiedDate: __expectString,
        Name: __expectString,
        SegmentGroups: (_) => de_SegmentGroupList(_, context),
        SegmentType: __expectString,
        Version: __expectInt32,
        tags: [, _json, `tags`],
    });
};
const de_SegmentsResponse = (output, context) => {
    return take(output, {
        Item: (_) => de_ListOfSegmentResponse(_, context),
        NextToken: __expectString,
    });
};
const de_SimpleCondition = (output, context) => {
    return take(output, {
        EventCondition: (_) => de_EventCondition(_, context),
        SegmentCondition: _json,
        SegmentDimensions: [, (_) => de_SegmentDimensions(_, context), `segmentDimensions`],
    });
};
const de_SMSTemplateResponse = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Body: __expectString,
        CreationDate: __expectString,
        DefaultSubstitutions: __expectString,
        LastModifiedDate: __expectString,
        RecommenderId: __expectString,
        TemplateDescription: __expectString,
        TemplateName: __expectString,
        TemplateType: __expectString,
        Version: __expectString,
        tags: [, _json, `tags`],
    });
};
const de_StartCondition = (output, context) => {
    return take(output, {
        Description: __expectString,
        EventStartCondition: (_) => de_EventStartCondition(_, context),
        SegmentStartCondition: _json,
    });
};
const de_TagsModel = (output, context) => {
    return take(output, {
        tags: [, _json, `tags`],
    });
};
const de_TemplateResponse = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationDate: __expectString,
        DefaultSubstitutions: __expectString,
        LastModifiedDate: __expectString,
        TemplateDescription: __expectString,
        TemplateName: __expectString,
        TemplateType: __expectString,
        Version: __expectString,
        tags: [, _json, `tags`],
    });
};
const de_TemplatesResponse = (output, context) => {
    return take(output, {
        Item: (_) => de_ListOfTemplateResponse(_, context),
        NextToken: __expectString,
    });
};
const de_TreatmentResource = (output, context) => {
    return take(output, {
        CustomDeliveryConfiguration: _json,
        Id: __expectString,
        MessageConfiguration: _json,
        Schedule: (_) => de_Schedule(_, context),
        SizePercent: __expectInt32,
        State: _json,
        TemplateConfiguration: _json,
        TreatmentDescription: __expectString,
        TreatmentName: __expectString,
    });
};
const de_VoiceTemplateResponse = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Body: __expectString,
        CreationDate: __expectString,
        DefaultSubstitutions: __expectString,
        LanguageCode: __expectString,
        LastModifiedDate: __expectString,
        TemplateDescription: __expectString,
        TemplateName: __expectString,
        TemplateType: __expectString,
        Version: __expectString,
        VoiceId: __expectString,
        tags: [, _json, `tags`],
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _CNV = "CreateNewVersion";
const _ET = "EndTime";
const _NT = "NextToken";
const _P = "Prefix";
const _PS = "PageSize";
const _ST = "StartTime";
const _T = "Token";
const _TK = "TagKeys";
const _TT = "TemplateType";
const _V = "Version";
const _cnv = "create-new-version";
const _et = "end-time";
const _nt = "next-token";
const _p = "prefix";
const _ps = "page-size";
const _st = "start-time";
const _t = "token";
const _tK = "tagKeys";
const _tt = "template-type";
const _v = "version";
