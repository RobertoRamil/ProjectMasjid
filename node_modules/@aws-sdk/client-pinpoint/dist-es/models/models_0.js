import { PinpointServiceException as __BaseException } from "./PinpointServiceException";
export const __EndpointTypesElement = {
    ADM: "ADM",
    APNS: "APNS",
    APNS_SANDBOX: "APNS_SANDBOX",
    APNS_VOIP: "APNS_VOIP",
    APNS_VOIP_SANDBOX: "APNS_VOIP_SANDBOX",
    BAIDU: "BAIDU",
    CUSTOM: "CUSTOM",
    EMAIL: "EMAIL",
    GCM: "GCM",
    IN_APP: "IN_APP",
    PUSH: "PUSH",
    SMS: "SMS",
    VOICE: "VOICE",
};
export const __TimezoneEstimationMethodsElement = {
    PHONE_NUMBER: "PHONE_NUMBER",
    POSTAL_CODE: "POSTAL_CODE",
};
export const Action = {
    DEEP_LINK: "DEEP_LINK",
    OPEN_APP: "OPEN_APP",
    URL: "URL",
};
export const AttributeType = {
    AFTER: "AFTER",
    BEFORE: "BEFORE",
    BETWEEN: "BETWEEN",
    CONTAINS: "CONTAINS",
    EXCLUSIVE: "EXCLUSIVE",
    INCLUSIVE: "INCLUSIVE",
    ON: "ON",
};
export const DimensionType = {
    EXCLUSIVE: "EXCLUSIVE",
    INCLUSIVE: "INCLUSIVE",
};
export const Duration = {
    DAY_14: "DAY_14",
    DAY_30: "DAY_30",
    DAY_7: "DAY_7",
    HR_24: "HR_24",
};
export const RecencyType = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
export const Operator = {
    ALL: "ALL",
    ANY: "ANY",
};
export const MessageType = {
    PROMOTIONAL: "PROMOTIONAL",
    TRANSACTIONAL: "TRANSACTIONAL",
};
export const ChannelType = {
    ADM: "ADM",
    APNS: "APNS",
    APNS_SANDBOX: "APNS_SANDBOX",
    APNS_VOIP: "APNS_VOIP",
    APNS_VOIP_SANDBOX: "APNS_VOIP_SANDBOX",
    BAIDU: "BAIDU",
    CUSTOM: "CUSTOM",
    EMAIL: "EMAIL",
    GCM: "GCM",
    IN_APP: "IN_APP",
    PUSH: "PUSH",
    SMS: "SMS",
    VOICE: "VOICE",
};
export const Alignment = {
    CENTER: "CENTER",
    LEFT: "LEFT",
    RIGHT: "RIGHT",
};
export const Mode = {
    DELIVERY: "DELIVERY",
    FILTER: "FILTER",
};
export class BadRequestException extends __BaseException {
    name = "BadRequestException";
    $fault = "client";
    Message;
    RequestID;
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
        this.RequestID = opts.RequestID;
    }
}
export const ButtonAction = {
    CLOSE: "CLOSE",
    DEEP_LINK: "DEEP_LINK",
    LINK: "LINK",
};
export const FilterType = {
    ENDPOINT: "ENDPOINT",
    SYSTEM: "SYSTEM",
};
export const Layout = {
    BOTTOM_BANNER: "BOTTOM_BANNER",
    CAROUSEL: "CAROUSEL",
    MIDDLE_BANNER: "MIDDLE_BANNER",
    MOBILE_FEED: "MOBILE_FEED",
    OVERLAYS: "OVERLAYS",
    TOP_BANNER: "TOP_BANNER",
};
export const Frequency = {
    DAILY: "DAILY",
    EVENT: "EVENT",
    HOURLY: "HOURLY",
    IN_APP_EVENT: "IN_APP_EVENT",
    MONTHLY: "MONTHLY",
    ONCE: "ONCE",
    WEEKLY: "WEEKLY",
};
export const CampaignStatus = {
    COMPLETED: "COMPLETED",
    DELETED: "DELETED",
    EXECUTING: "EXECUTING",
    INVALID: "INVALID",
    PAUSED: "PAUSED",
    PENDING_NEXT_RUN: "PENDING_NEXT_RUN",
    SCHEDULED: "SCHEDULED",
};
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    Message;
    RequestID;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.RequestID = opts.RequestID;
    }
}
export class ForbiddenException extends __BaseException {
    name = "ForbiddenException";
    $fault = "client";
    Message;
    RequestID;
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ForbiddenException.prototype);
        this.Message = opts.Message;
        this.RequestID = opts.RequestID;
    }
}
export class InternalServerErrorException extends __BaseException {
    name = "InternalServerErrorException";
    $fault = "server";
    Message;
    RequestID;
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
        this.Message = opts.Message;
        this.RequestID = opts.RequestID;
    }
}
export class MethodNotAllowedException extends __BaseException {
    name = "MethodNotAllowedException";
    $fault = "client";
    Message;
    RequestID;
    constructor(opts) {
        super({
            name: "MethodNotAllowedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MethodNotAllowedException.prototype);
        this.Message = opts.Message;
        this.RequestID = opts.RequestID;
    }
}
export class NotFoundException extends __BaseException {
    name = "NotFoundException";
    $fault = "client";
    Message;
    RequestID;
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
        this.RequestID = opts.RequestID;
    }
}
export class PayloadTooLargeException extends __BaseException {
    name = "PayloadTooLargeException";
    $fault = "client";
    Message;
    RequestID;
    constructor(opts) {
        super({
            name: "PayloadTooLargeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PayloadTooLargeException.prototype);
        this.Message = opts.Message;
        this.RequestID = opts.RequestID;
    }
}
export class TooManyRequestsException extends __BaseException {
    name = "TooManyRequestsException";
    $fault = "client";
    Message;
    RequestID;
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
        this.RequestID = opts.RequestID;
    }
}
export const JobStatus = {
    COMPLETED: "COMPLETED",
    COMPLETING: "COMPLETING",
    CREATED: "CREATED",
    FAILED: "FAILED",
    FAILING: "FAILING",
    INITIALIZING: "INITIALIZING",
    PENDING_JOB: "PENDING_JOB",
    PREPARING_FOR_INITIALIZATION: "PREPARING_FOR_INITIALIZATION",
    PROCESSING: "PROCESSING",
};
export const Format = {
    CSV: "CSV",
    JSON: "JSON",
};
export const DayOfWeek = {
    FRIDAY: "FRIDAY",
    MONDAY: "MONDAY",
    SATURDAY: "SATURDAY",
    SUNDAY: "SUNDAY",
    THURSDAY: "THURSDAY",
    TUESDAY: "TUESDAY",
    WEDNESDAY: "WEDNESDAY",
};
export const State = {
    ACTIVE: "ACTIVE",
    CANCELLED: "CANCELLED",
    CLOSED: "CLOSED",
    COMPLETED: "COMPLETED",
    DRAFT: "DRAFT",
    PAUSED: "PAUSED",
};
export const SourceType = {
    ALL: "ALL",
    ANY: "ANY",
    NONE: "NONE",
};
export const Type = {
    ALL: "ALL",
    ANY: "ANY",
    NONE: "NONE",
};
export const Include = {
    ALL: "ALL",
    ANY: "ANY",
    NONE: "NONE",
};
export const SegmentType = {
    DIMENSIONAL: "DIMENSIONAL",
    IMPORT: "IMPORT",
};
export const DeliveryStatus = {
    DUPLICATE: "DUPLICATE",
    OPT_OUT: "OPT_OUT",
    PERMANENT_FAILURE: "PERMANENT_FAILURE",
    SUCCESSFUL: "SUCCESSFUL",
    TEMPORARY_FAILURE: "TEMPORARY_FAILURE",
    THROTTLED: "THROTTLED",
    UNKNOWN_FAILURE: "UNKNOWN_FAILURE",
};
export const TemplateType = {
    EMAIL: "EMAIL",
    INAPP: "INAPP",
    PUSH: "PUSH",
    SMS: "SMS",
    VOICE: "VOICE",
};
